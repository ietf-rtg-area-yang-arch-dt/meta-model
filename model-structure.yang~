module model-structure {

  yang-version "1";

  // namespace
  namespace "urn:ietf:params:xml:ns:yang:model-structure";

  prefix "struct";

  // import some basic types

  // meta
  organization "IETF RTG YANG Design Team Collaboration
                with OpenConfig";

  contact
      "Routing Area YANG Architecture Design Team -
       <rtg-dt-yang-arch@ietf.org>"; 

  description
    "This module describes a model structure for YANG
     configuration and operational state data models. Its intent is
     to describe how individual device protocol and feature models
     fit together and interact.";

  revision "2015-08-24" {
    description
      "IETF Routing YANG Design Team Meta-Model";
    reference "TBD";
  }

  // extension statements

  // feature statements

  // identity statements
  
  identity networking-instance {
      description
         "Base identity from which identities describing
          networking instance types are derived.";
  }

  identity oam-protocol-type {
      description
          "Base identity for derivation of OAM protocols";
  }

  identity networking-service-type {
      description
          "Base identity for derivation of networking services";
  }

   identity ethernet-protocol-type {
      description
          "Base identity for derivation of ethernet
           protocols";
   }

   identity ipv4-interface-protocol-type {
      description
          "Base identity for derivation of IPv4 interface
           protocols";
   }

   identity ipv6-interface-protocol-type {
      description
          "Base identity for derivation of IPv6 interface
           protocols";
   }

   identity mpls-protocol-type {
      description
          "Base identity for derivation of MPLS protocols";
   }

   identity control-plane-protocol-type {
      description
          "Base identity for derivation of control-plane protocols";
   }

   identity system-management-protocol-type {
      description
          "Base identity for derivation of system management
           protocols";
   }

   identity oam-service-type {
      description
          "Base identity for derivation of Operations,
           Administration, and Maintenance (OAM) services.";
   }

   identity aaa-service-type {
      description
          "Base identity for derivation of Authentication,
           Authorization, and Accounting (AAA) services.";
   }

  // typedef statements

  // grouping statements

  grouping info {
    description
      "Base system information";

    container info {
      description
        "This container is for base system information, including
        device type (e.g., physical or virtual), model, serial no.,
        location, etc.";

      leaf device-type {
        //TODO: consider changing to an identity if finer grained
        // device type classification is envisioned
        type enumeration {
          enum PHYSICAL {
            description "physical or hardware device";
          }
          enum VIRTUAL {
            description "virtual or software device";
          }
        }
        description
          "Type of the device, e.g., physical or virtual.  This node
          may be used to activate other containers in the model";
      }

    }
  }

  grouping hardware {
    description
      "hardware / vendor -specific data relevant to the platform";

    container hardware {
      description
        "This container is an anchor point for platform-specific
        configuration and operational state data.  It may be further
        organized into chassis, line cards, ports, etc.  It is
        expected that vendor or platform-specific augmentations
        would be used to populate this part of the device model";
    }
  }

  grouping interface-ip-common {
    description
      "interface-specific configuration for IP interfaces, IPv4 and
      IPv6";

  }

  grouping ethernet-protocols {
      description
          "Grouping for ethernet protocols configured
            on an interface";
      container ethernet-protocols {
          description
              "Container for list of ethernet protocols configured
                on an interface";
          list ethernet-protocol {
              key "type";
              description
                  "List of ethernet protocols configured
                   on an interface";
              leaf type {
                  type identityref {
                      base ethernet-protocol-type;
                  }
                  mandatory true;
                  description
                      "Aggregates, RSTP, LLDP, PTP, etc.";
              }
          }
      }
  }
  
  grouping ipv4-interface-protocols {
      container ipv4-interface-protocols {
          list ipv4-interface-protocol {
              key "type";
              leaf type {
                  type identityref {
                      base ipv4-interface-protocol-type;
                  }
                  mandatory true;
                  description
                      "ARP, ICMP, VRRP, DHCP Client, etc.";
              }
              description
                  "List of IPv4 protocols configured
                   on an interface";
          }
          description
              "Container for list of IPv4 protocols configured
                on an interface";
      }
      description
          "Grouping for IPv4 protocols configured on an interface";
  }
  
  grouping ipv6-interface-protocols {
      description
          "Grouping for IPv6 protocols configured on
           an interface.";
      container ipv6-interface-protocols {
          description
              "Container for list of IPv6 protocols configured
                on an interface.";
          list ipv6-interface-protocol {
              key "type";
              description
                  "List of IPv6 protocols configured
                   on an interface";
              leaf type {
                  type identityref {
                      base ipv6-interface-protocol-type;
                  }
                  mandatory true;
                  description
                      "ND, ICMPv6, VRRP, DHCPv6 Client, etc.";
              }
          }
      }
  }
  
  grouping interfaces {
    description "interface-related models";
    container interfaces {
      description "Various interface models";
      reference "RFC 7223 - A Yang Model for Interface Management";
      list interface {
        key "name";
        description "List of interfaces keyed by name";
        leaf name {
            type string;
            description "Interface name";
        }
        leaf bind-network-element-id {
          type uint8;
          description "Logical network element ID to which
                       interface is bound";
        }
        container ethernet {
          description "Ethernet interface config, e.g., 10, 40,
                       100GB Ethernet";
          leaf bind-networking-instance-name {
              type string;
              description "Networking Instance to which
                           the Ethernet instance is bound";
          }
          uses ethernet-protocols;
        }
        container vlans {
            description "VLANs, 802.1q, q-in-q, etc.";
            reference "IEEE 802.1Q";
        }
        container tunnels {
            description
                "Logical tunnel interfaces incl. GRE, VxLAN,
                  L2TP etc.";
        }

        container ipv4 {
          description "IPv4 interface";
          reference "RFC 7277 - A Yang Model for IP Management";
          leaf bind-networking-instance-name {
              type string;
              description "Networking Instance to which
                           IPv4 interface is bound";
          }
          uses ipv4-interface-protocols;
        }
        container ipv6 {
          description "IPv6 interface";
            reference "RFC 7277 - A Yang Model for IP Management";
            leaf bind-networking-instance-name {
                type string;
                description "Networking Instance to which
                             IPv4 interface is bound";
            }
            uses ipv6-interface-protocols;
        }
      }
    }
  }
<<<<<<< HEAD
  
=======

  identity networking-instance {
      description
         "Base identity from which identities describing
          networking instance types are derived.";
  }

>>>>>>> origin/master
  grouping router-id {
      description
          "This grouping provides router ID.";
      leaf router-id {
          type uint32;  // yang:dotted-quad
          description
            "A 32-bit number in the form of a dotted quad that is
             used by some routing protocols identifying a router.";
          reference
              "RFC 2328: OSPF Version 2.";
      }
  }

  grouping oam-protocols {
<<<<<<< HEAD
      container oam-protocols {
          list oam-protocol {
              key "type";
              leaf type {
                  type identityref {
                      base oam-protocol-type;
                  }
                  mandatory true;
                  description
                      "The Operations, Administration, and
                       Maintenance (OAM) protocol type, e.g., BFD,
                       TWAMP, CFM, etc.";
              }
              description
                  "List of OAM protocols configured for a
                   networking instance.";
          }
          description
              "Container for list of OAM protocols configured for a
                networking instance.";
      }
      description
          "Grouping for OAM protocols configured for a
           networking instance.";
  }
      
=======
   description
      "Definitions for OAM protocols within a networking-instance";
   container oam-protocols {
       description
           "OAM protocols";
     container bfd {
         description "Bi-directional Forwarding Detection (BFD)
                   configuration";

     }
     container cfm {
         description
            "Ethernet connectivity fault management.  Also includes
             options that are associated with specific interfaces,
             such as maintenance endpoint domains.";
        reference "IEEE 802.1ag";
     }
     container twamp {
         description
             "Two-way active measurement protocol for measuring
             round-trip IP layer performance.";
         reference "RFC 5357 A Two-Way Active Measurement Protocol
                   (TWAMP)";
     }
   }
  }

>>>>>>> origin/master
  grouping mpls {
    description
        "Grouping for MPLS and TE configuration configured for
         a networking-instance.";
    container mpls {
      description
          "Container for MPLS and TE configuration for a 
           networking-instance.";
      container global {
          description "Global MPLS configuration";
      }
      list mpls-protocol {
          key "type";
          description
              "List of MPLS protocols configured for a
               networking instance.";
          leaf type {
              type identityref {
                  base mpls-protocol-type;
              }
              mandatory true;
              description
                  "MPLS and Traffic Engineering protocol type,
                   MPLS static, LDP, RSVP TE, etc.";
          }
      }
<<<<<<< HEAD
=======
     container label-switched-paths {
       description "Models for different types of LSPs";
     }
     container constrained-path {
       description "traffic-engineered or constrained path LSPs";
     }
     container igp-congruent {
       description "LSPs that follow the IGP-computed path";
     }
     container static {
        description "Statically configured LSPs";
     }
>>>>>>> origin/master
    }
  }

  grouping networking-instance-policy {
    description
        "Networking instance policies such as route
         distinguisher, route targets, VPLS ID and neighbor,
         Ethernet ID, etc. ";
    reference
        "RFC 4364 - BGP/MPLS Virtual Private Networks (VPNs)
         RFC 6074 - Provisioning, Auto-Discovery, and Signaling
              in Layer 2 Virtual Private Networks (L2VPNs)
         RFC 7432 - BGP MPLS-Based Ethernet VPN";
    container networking-instance-policy {
        description "Networking Instance Policy -- details TBD";
    }
  }

  grouping control-plane-protocols {
<<<<<<< HEAD
      description
          "Grouping for control plane protocols configured for
           a networking-instance";
      container control-plane-protocols {
          description
              "Container for control plane protocols configured for
               a networking instance.";
          list control-plane-protocol {
              key "type";
              description
                  "List of control plane protocols configured for
                   a networking instance.";
              leaf type {
                  type identityref {
                      base control-plane-protocol-type;
                  }
                  mandatory true;
                  description
                      "The control plane protocol type, e.g., BGP,
                       OSPF IS-IS, etc";
              }
          }
      }
=======
    description "control protocol models";

    container control-plane-protocols {
      description "Control plane protocols and features";

      container bgp {
          description "BGP-4 protocol configuration";
          reference "RFC 4271 - Border Gateway Protocol 4 (BGP-4)";
          container policy {
              description "Policy specific to BGP";
          }
      }
      container is-is {
          description "ISO IS-IS protocol configuration";
          reference "RFC 1195 - Use of OSI IS-IS for Routing in
                     TCP/IP and Dual Environments";
          container policy {
              description "Policy specific to IS-IS";
          }
      }
      container ospf {
          description "Open Shortest Path First (OSPF) protocol
                       configuration";
          reference "RFC 2328 - OSPFv2 Protocol
                     RFC 5340 - OSPF for IPv6";
          container policy {
              description "Policy specific to OSPF";
          }
      }
      container rsvp {
          description "Resource Reservation Protocol (RSVP)
                       protocol configuration";
          reference "RFC 2205 - Resource ReSerVation Protocol (RSVP)
                     RFC 3209 - RSVP-TE: Extensions to RSVP for LSP
                     Tunnels";
      }
      container segment-routing {
          description "Segment Routing configuration for networking
                       instance";
          reference "draft-likowski-spring-sr-yang";
      }
      container ldp {
          description "Label Distribution Protocol (LDP)
                       configuration";
          reference "RFC 5036 - LDP Specification";
      }
      container pim {
          description "Protocol Independent Multicast (PIM)
                       configuration";
          reference "RFC 4601 - Protocol Independent Multicast -
                     Sparse Mode (PIM-SM) Protocol Specification";
      }
      container igmp {
          description "Internet Group Management Protocol
                       configuration";
          reference "RFC 3376 - Internet Group Management Protocol,
                     Version 3";
      }
      container mld {
          description "Multicast Listener Discovery Protocol
                       configuration";
          reference "RFC 3810 - Multicast Listener Discovery
                     Version 2 (MLDv2 for IPv6)";
      }
      container static-routes {
          description "Static route configuration";
          reference "draft-ietf-netmod-routing-cfg";
      }
    }
>>>>>>> origin/master
  }

  grouping ribs {
    description
      "Routing Information Bases (RIBs) supported by a
       networking-instance";
    container ribs {
        description
            "RIBs supported by a networking-instance";
        list rib {
            key "name";
            min-elements "1";
            description
                "Each entry represents a RIB identified by the
               'name' key. All routes in a RIB must belong to the
                same address family.

                For each routing instance, an implementation should
                provide one system-controlled default RIB for each
                supported address family.";
            leaf name {
                type string;
                description
                    "The name of the RIB.";
            }
            reference "draft-ietf-netmod-routing-cfg";
            leaf description {
                type string;
                description
                    "Description of the RIB";
            }
            // Note that there is no list of interfaces within
            container policy {
                description "Policy specific to RIB";
            }
        }
    }
  }

  grouping networking-services {
      description
          "Grouping for networking-services configured for
           a networking-instance.";
      container networking-services {
          description
              "Container for lst of networking services configured
               for a networking instance.";
          list networking-service {
              key "type";
              description
                  "List of networking services configured for a
                   networking instance.";
              leaf type {
                  type identityref {
                      base networking-service-type;
                  }
                  mandatory true;
                  description
                      "The networking services type supported within
                       a networking instance, e.g., NTP server, DNS
                       server, DHCP server, etc.";
              }
          }
      }
  }
<<<<<<< HEAD

  grouping oam-services {
    description "containers for features related to operations,
                 administration, and maintenance (OAM).";
    container oam-services {
      description "Commonly use OAM functions on devices";
      list oam-service {
          key "type";
          description
              "List of OAM services configured for a
               logical network element.";
          leaf type {
              type identityref {
                  base oam-service-type;
              }
              mandatory true;
                  description
                      "The OAM services type supported within
                       a logical networking element, e.g., SNMP.";
          }
      }
    }
  }

  grouping system-services {
    description "Containers for system service models.";
    uses oam-services;
  }

  grouping system-aaa {
    description "AAA-related services";
    container aaa {
      description
          "Authentication, Authorization, and Accounting (AAA).";
      list aaa-service {
          key "type";
          description
              "List of AAA services configured for a
               logical network element.";
          leaf type {
              type identityref {
                  base aaa-service-type;
              }
              mandatory true;
                  description
                      "The AAA services type supported within
                       a logical networking element, e.g., RADIUS.";
          }
      }
    }
  }
=======
>>>>>>> origin/master

  grouping system {
      description "System management for device or logical network
<<<<<<< HEAD
                 element";
      container system {
          description "System management for device or logical
                       network element";
          leaf device-view {
              type boolean;
              default "true";
              description "Flag indicating whether or not the logical
                           network element is able to view and manage
                           the entire device";
          }
          container system-management-global {
              description "System management - logical device
                           management with reuse of RFC 7317";
          }
          list system-management-protocol {
              key "type";
              leaf type {
                  type identityref {
                      base system-management-protocol-type;
                  }
                  mandatory true;
                  description
                      "NTP, DNS, Syslog, ssh, TACAC+, NETCONF, etc.";
              }
              description "List of system management protocol
                           configured for a logical networking
                           element.";
=======
                   element";
      container system-management {
          description "System management - logical device
                       management with reuse of RFC 7317";
          leaf device-view {
              type boolean;
              default "true";
              description "Flag indicating whether or not the
                           logical network element is able to view
                           and manage the entire device";
          }
          container syslog {
              description "Syslog configuration";
          }
          container dns {
              description "Domain Name Service (DNS) and resolver
                           configuration";
          }
          container ntp {
              description "network time protocol configuration";
          }
          container statistics-collection {
              description
                  "Mechanisms for data collection from devices,
                   including packet and flow-level sampling";
          }
          container ssh {
              description "SSH server configuration";
          }
          container tacacs {
              description "TACACS+ configuration";
          }
          container snmp {
              description "System Network Management Protocol
                           (SNMP) configuration";
          }
          container netconf {
              description "Network Configuration Protocol(NETCONF)";
              reference "RFC 6020 - YANG - A Data Modeling Language
                         for the Network Configuration Protocol
                         (NETCONF)";
>>>>>>> origin/master
          }
      }
  }

  grouping ietf-acl {
      description "Packet Access Control Lists (ACLs) as specified
                   in draft-ietf-netmod-acl-model";
      container ietf-acl {
          description "ACLs and packet forwarding rules";
      }
  }

  grouping ietf-key-chain {
      description "Key chains as specified in
                   draft-acee-rtgwg-yang-key-chain;";
      container ietf-key-chain {
          description "Key chains";
      }
  }

  grouping qos {
    description "QoS features";

    container qos {
      description "QoS, including policing, shaping, etc.";
    }
  }

  // data definition statements
  container device {
    description "Top-level anchor point for models. Device is a
                 generic L2/L3 network element";
    uses info;
    uses hardware;
    uses interfaces;
    uses qos;
    container logical-network-elements {
      description "Network devices may support multiple logical
                   network instances";

      list logical-network-element {
        key network-element-id;
        description "List of logical network elements";
        leaf network-element-id {
          type uint8; // expect a small number of logical routers
          description "Device-wide unique identifier for the
                       logical network element";
        }
        leaf network-element-name {
          type string;
          description "Descriptive name for the logical network
                       element";
        }
        leaf default-networking-instance-name {
          type string;
          description "Specification of the networking instance to
                       use for management connectivity";
        }
        uses system;
        uses ietf-acl;
        uses ietf-key-chain;
        container networking-instances {
            description "Networking instances each of which have
                         an independent IP/IPv6 addressing space
                         and protocol instantiations. For layer 3,
                         this consistent with the routing-instance
                         definition in ietf-routing";
            reference "draft-ietf-netmod-routing-cfg";
            list networking-instance {
                key networking-instance-name;
                description "List of networking-instances";
                leaf networking-instance-name {
                    type string;
                    description "logical network element scoped
                                 identifier for the networking
                                 instance";
                }
                leaf type {
                    type identityref {
                        base networking-instance;
                    }
                    description
                        "The networking instance type -- details TBD
                         Likely types include core, L3-VRF, VPLS,
                         L2-cross-connect, L2-VSI, etc.";
                }
                leaf enabled {
                    type boolean;
                    default "true";
                    description
                      "Flag indicating whether or not the networking
                       instance is enabled.";
                }
                uses router-id {
                    description
                        "Router ID for networking instances";
                }
                leaf description {
                    type string;
                    description
                      "Description of the networking instance
                      and its intended purpose";
                }
                // Note that there is no list of interfaces within
                // the networking-instance
                uses oam-protocols;
                uses networking-instance-policy;
                uses control-plane-protocols;
                uses ribs;
                uses mpls;
                uses networking-services;
            }
        }
      }
    }
  }

  // augment statements

  // rpc statements

  // notification statements

}
